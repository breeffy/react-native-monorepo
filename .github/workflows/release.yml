name: Publish new release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'prerelease, patch, minor or major version'
        required: true
        default: 'patch'
      prerelease:
        description: 'beta, alpha or rc prerelease'
        required: false
      draft:
        description: 'github release type: true or false'
        required: true
        default: 'true'

jobs:
  release-package:
    environment: release
    runs-on: ubuntu-latest
    steps:
      - name: Check version input
        id: version-option
        uses: actions/github-script@441359b1a30438de65712c2fbca0abe4816fa667
        with:
          result-encoding: string
          script: |
            if ('${{ github.event.inputs.version }}' === 'prerelease') {
              return ''
            } else if (['patch', 'minor', 'major'].includes('${{ github.event.inputs.version }}')) {
              return '${{ github.event.inputs.version }}'
            } else {
              core.setFailed('input version [${{ github.event.inputs.version }}] is not "patch", "minor" or "major"')
            }
      - name: Check prerelease input
        id: prerelease-option
        uses: actions/github-script@441359b1a30438de65712c2fbca0abe4816fa667
        with:
          result-encoding: string
          script: |
            if ('${{ github.event.inputs.prerelease }}' === '') {
              return ''
            } else if (['beta', 'alpha', 'rc'].includes('${{ github.event.inputs.prerelease }}')) {
              if ('${{ github.event.inputs.version }}' === 'prerelease') {
                return '--canary --preid ${{ github.event.inputs.prerelease }}'
              } else {
                return '--canary'
              }
            } else {
              core.setFailed('input version [${{ github.event.inputs.version }}] is not "beta", "alpha" or "rc"')
            }
      - name: Figure out npm tag option
        id: npmtag-option
        uses: actions/github-script@441359b1a30438de65712c2fbca0abe4816fa667
        with:
          result-encoding: string
          script: |
            if ('${{ github.event.inputs.prerelease }}' === '') {
              return ''
            } else if (['beta', 'alpha', 'rc'].includes('${{ github.event.inputs.prerelease }}')) {
              return '--dist-tag ${{ github.event.inputs.prerelease }}'
            } else {
              core.setFailed('input version [${{ github.event.inputs.version }}] is not "beta", "alpha" or "rc"')
            }
      - name: Import BreeffyBot GPG Key
        env:
          BREEFFYBOT_GPG_KEY: ${{ secrets.BREEFFYBOT_GPG_KEY }}
        run: echo -e "$BREEFFYBOT_GPG_KEY" | gpg --import
      - name: Checkout source code
        uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
        with:
          token: ${{ secrets.BREEFFYBOT_TOKEN }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Restore yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-dir-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: yarn-cache-dir-
      - name: Setup git config
        run: |
          git config user.name "BreeffyBot"
          git config user.email bot@breeffy.com
          git config user.signingkey FD07D075138186E0 
          git config commit.gpgSign true
          git config tag.gpgSign true
      - name: Setup Node.js and npm
        uses: actions/setup-node@270253e841af726300e85d718a5f606959b2903c
        with:
          node-version: '16.10.0'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'
          scope: '@breeffy'
      - name: Yarn Version
        run: yarn --version
      - name: Current Working Directory
        run: pwd
      - name: Install dependencies
        run: yarn install --immutable
      - name: Run unit tests
        run: yarn test
      - run: >
          lerna publish --yes --no-verify-access --message "publish new release"
          ${{ steps.npmtag-option.outputs.result }}
          ${{ steps.prerelease-option.outputs.result }}
          ${{ steps.version-option.outputs.result }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_BREEFFY_ORG_AUTOMATION_TOKEN }}
